So the RBD simulator is ready to rock and roll. 

----------------
# Prerequisites:
----------------
Jannson C Library (http://www.digip.org/jansson/)
GNU Scientific LIbrary (http://www.gnu.org/software/gsl/)

--------------------------
# Building the Executable:
--------------------------
To build it, you'll need to copy make.template.inc to make.inc, and then set everything in there to whatever 
is right for your system. Then just do a 'make' and it should build! The makefile is a little wonk as of now. 
Always make clean before you make.

------------------------
# To start a simulation:
------------------------
./bd_run [inputfile] [outputfile] [rngseed] is the format. 

All arguments are required. rngseed is a number (int).

-----------------
# Output Formats:
-----------------
We currently support two file formats for the output (trajectories):

1) Standard XYZ file format (en.wikipedia.org/wiki/XYZ_file_format). This is the default.
This file format can be used with VMD (http://www.ks.uiuc.edu/Research/vmd/) for visualization and analysis.
The installation of the TopoTools (https://sites.google.com/site/akohlmey/software/topotools) VMD plugin (version 1.4 or later) 
is necessary to allow the visualization and analysis  of trajectories with variable number of particles.

2) LAMMPS file format (http://lammps.sandia.gov). This format can be used with the Pizza.py Toolkit (http://pizza.sandia.gov).
To select the LAMMPS file format just add the keyword "pizza" after [rngseed] in your command line.

./bd_run [inputfile] [outputfile] [rngseed] pizza

----------------------
# Supported Reactions:
----------------------
A --> B
A + B --> C
A + B --> C + D
A --> B + C
A + B --> null
We currently don't support: null -> A reactions. But we will soon. Just being lazy.

--------------------
# Input File Syntax:
--------------------
The input format is JSON (http://json.org). 
JSON syntax is a subset of the JavaScript object notation syntax:
- Data is in name/value pairs
- Data is separated by commas
- Curly braces hold objects
- Square brackets hold arrays

JSON values can be:

A number (integer or floating point)
A string (in double quotes)
A Boolean (true or false)
An array (in square brackets)
An object (in curly braces)
null

The name:value pairs recognized by RBD are:

"simType" : "periodicBox" - periodic rectangular box (default). 
            "spherical" - confining ellipsoid.
            "boxWithWalls" - confining rectangular box.

"X" : x-dimension of the rectangular box, ellipsoid semi-principal axis (positive int, float)
"Y" : y-dimension of the rectangular box, ellipsoid semi-principal axis (positive int, float)
"Z" : z-dimension of the rectangular box, ellipsoid semi-principal axis (positive int, float)

To define a sphere simply set X,Y and Z equal to the sphere's radius.

"steps" : total number of time steps (positive int) 

"printSteps" : frequency used to save coordinates onto the output file (positive int)

"dt" : timestep (positive float)

"types" : object containing values related to the different atom (molecules etc.) types.
          Name:value pairs for the object "types" are:   
          "type" : atom type (positive int)
          "radius" : atom radius (positive float)
          "D" : diffusion coefficient (positive float)


"atoms" : array of objects (one for each defined atom/molecule/entity) containing values for ...
          "x" : x-coordinate of atom (float)
          "y" : y-coordinate of atom (float)
          "z" : z-coordinate of atom (float)
          "type" : atom type (positive int)
          
"atomDist" : array of objects defining for each atom type a random distribution within the system's container.
             Name:value pairs are:
             "type" : atom type (positive int)
             "number" : number of atoms of type "type" (positive int)
             
"monatomic" : array of objects defining the monatomic reactions containing values for ...
              "A" : reactant (positive int defining the atom type)
              "B" : product (positive int defining the atom type)
              "C" : product (positive int defining the atom type)
              "k" : reaction rate (positive float)

"binary" : array of objects defining the binary reactions containing values for ...
              "A" : reactant (positive int defining the atom type)
              "B" : reactant (positive int defining the atom type)
              "C" : product (positive int defining the atom type)
              "D" : product (positive int defining the atom type)
              "k" : reaction rate (positive float)
             
"comment" : string containing a comment

----------
# Example:
----------

The following is an example input file (lk.in) that defines and simulate a spatial Lotka-Volterra model.

#--------------------------------------------------------------------
{ "X" : 200,
  "Y" : 200,
  "Z" : 20,
  "steps" : 10000,
  "printSteps" : 10,
  "dt" : 0.001,
  "simType" : "periodicBox",
  "monatomic" : [{"A" : 1, "B" : 1, "C" : 1, "k" : 10},
                {"A" : 2, "k" : 10}],
  "binary" : [{ "A" : 1, "B" : 2, "C" : 2, "D" :2, "k" : 4.818e12 }],
  "atomsDist" : [{ "type" : 1, "number" : 1000 },
                 { "type" : 2, "number" : 1000 }],
  "types" : [{ "type" : 1, "radius" : 1.775, "D" : 100 },
             { "type" : 2, "radius" : 1.775, "D" : 100 }]}
#--------------------------------------------------------------------

The simulation can be started from the directory containing both the executable "bd_run" and the 
input file "lk.in" as follows:
 
----------------------------
 ./bd_run lk.in lk.out 13633
----------------------------

JSON syntax and input file explanation:

The system is composed by two (chemical) species: type 1 and type 2 that react as follows:
type1 ---> 2 * type1 (k1=10)
type1 + type2 ---> 2 * type2 (k2 = 0.01)
type2 ---> 0 (k3=10)
The system is enclosed in a rectangular periodic box of dimensions 200x200x20.
The population for both type1 and type2 species is set to 1000.
The two species are represented as hard-spheres with a radius = 1.775 and a diffusion coefficient of D = 100.
The timestep is 0.001 and the number of time steps is fixed at 10000. This gives a total simulation time of 10.
The coordinates of the two species are saved every 10 time steps in the output file "lk.out" (XYZ format).